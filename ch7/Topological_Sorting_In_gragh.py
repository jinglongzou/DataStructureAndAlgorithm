#################################################################################################################
'''
AOV网：用图中的顶点表示某个具有一定规模的工程里不同活动的，同图中的边表示各活动之间的先后关系，
       这样的有向图称为顶点活动图(AOV) activity on vertex network
       这类图通常用于制定工作计划
拓扑排序：拓扑排序问题就是：在一个AOV网络里的活动能否排成一种全序。
       对于给定的AOV网络N,如果N中所有顶点能排成一种全序：S = v0,v1,...,vn，满足如果N中存在顶点vi到顶点
       vj的路径，那么vi就排在vj之前，S就称为N的一个拓扑序列。而构造拓扑序列的操作就称为拓扑排序
    注：AOV网络存在拓扑排序的前提条件：AOV网络中不存在回路。
    拓扑排序个人理解：
        排序的根本就是找出一个序列，使得序列中元素i的前一个元素j，一定先于i。
拓扑排序算法：
    基本思想：
        1、从N中选择一个入度为零的顶点，作为序列的下一个顶点
        2、从N中删除所选的顶点及其所有的出边
        3、反复执行上述操作，直到选出了图中所有的顶点，后者找不到入度非零的顶点时结束算法。
    如果剩下入度非零的顶点，说明N中有回路。
'''
from Gragh_AdjList import GraghAL
from Queue_SequenseList import squeue
def toposort(gragh):
    vnum = gragh.vertex_num()
    #创建入度表
    indegree = [0] * vnum
    #创建一个零度维护表,这里使用队列来维护零度表
    zerov = squeue()
    #创建拓扑序列
    topo_seq = []
    for vi in range(vnum):
        for vj,w in gragh.out_edges(vi):
            indegree[vj] +=1
    #初始化话零度维护表
    for i in range(vnum):
        if indegree[i] == 0:
            zerov.enqueue(i)
    for n in range(vnum):
        if zerov.is_empty():
            return False
        u = zerov.dequeue()
        topo_seq.append(u)
        for v,w in gragh.out_edges(u):
            indegree[v] -=1
            if indegree[v] == 0:
                zerov.enqueue(v)
    return topo_seq
#复杂度分析
#时间复杂度：
#           创建入度表是两重循环，时间复杂度为max(O(E),O(V)),初始化零度表需要O(V)
#           出入栈次数为V,出入栈复杂度为O(1)，同时需要检查每一条边，因此主循环的时间复杂度为max(O(E),O(V))
#           总的时间复杂度为O(E+V)
#空间复杂度：
#           入度表，零度表的队列，最大元素个数都由定点数决定，因此空间复杂度为O(V)
########################################################################################################################
'''
AOE网：是一类带权有向图。(AOE) activity on edge network。
       这是一类非常重要的PERT(program evaluation and review technique)模型,用于大型项目的计划和管理。
AOE网：AOE网是一种无环的带权有向图
        1、顶点表示事件，有向边表示活动，边上的权值表示活动的持续事件
        2、图中的一个顶点表示事件，也就是他的入边所表示的活动都已经完成，他的出边所表示的活动即将
            开始，把这一情况叫做事件
AOE网络的关键路径：
        AOE网中的描述的活动可以并行的进行，只要一项活动的前提调节均已发生（也就是以该边的始点
        为终点的活动都已完成），这项活动就可以开始。所以完成工程的最短时间，就是从开始点
        到完成点的最长路径的长度（即路径上各边权值之和）。这种最长路径称为AOE网络的关键路径，
        在AOE网上最重要的一项计算工作是找出其中的关键路径
关键路径算法：

'''

########################################################################################################################
#测试
mat = [[0,1,1,0,0],
      [0,0,0,1,0],
      [0,1,0,0,1],
      [0,0,0,0,0],
      [0,0,0,0,0]]

G = GraghAL(mat)
print(toposort(G))